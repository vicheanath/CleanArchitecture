using Shared.Primitives;

namespace Clean.Architecture.Domain.Products.ValueObjects;

/// <summary>
/// Represents SEO metadata for a product.
/// </summary>
public sealed class SeoMetadata : ValueObject
{
    /// <summary>
    /// Gets the meta title for SEO.
    /// </summary>
    public string? MetaTitle { get; }

    /// <summary>
    /// Gets the meta description for SEO.
    /// </summary>
    public string? MetaDescription { get; }

    /// <summary>
    /// Gets a value indicating whether SEO metadata is configured.
    /// </summary>
    public bool IsConfigured => !string.IsNullOrWhiteSpace(MetaTitle) || !string.IsNullOrWhiteSpace(MetaDescription);

    /// <summary>
    /// Gets the effective meta title (returns provided title or generates from product name).
    /// </summary>
    /// <param name="productName">The product name to use as fallback.</param>
    /// <returns>The effective meta title.</returns>
    public string GetEffectiveMetaTitle(string productName)
    {
        return !string.IsNullOrWhiteSpace(MetaTitle) ? MetaTitle : productName;
    }

    /// <summary>
    /// Gets the effective meta description (returns provided description or generates from product description).
    /// </summary>
    /// <param name="productDescription">The product description to use as fallback.</param>
    /// <returns>The effective meta description.</returns>
    public string GetEffectiveMetaDescription(string productDescription)
    {
        if (!string.IsNullOrWhiteSpace(MetaDescription))
            return MetaDescription;

        // Generate from product description, truncated to 160 characters
        if (string.IsNullOrWhiteSpace(productDescription))
            return string.Empty;

        return productDescription.Length <= 160
            ? productDescription
            : productDescription.Substring(0, 157) + "...";
    }

    private SeoMetadata(string? metaTitle, string? metaDescription)
    {
        MetaTitle = metaTitle?.Trim();
        MetaDescription = metaDescription?.Trim();
    }

    /// <summary>
    /// Creates a new SEO metadata instance.
    /// </summary>
    /// <param name="metaTitle">The meta title.</param>
    /// <param name="metaDescription">The meta description.</param>
    /// <returns>A new SEO metadata instance.</returns>
    public static SeoMetadata Create(string? metaTitle = null, string? metaDescription = null)
    {
        if (!string.IsNullOrWhiteSpace(metaTitle) && metaTitle.Length > 200)
            throw new ArgumentException("Meta title must be less than 200 characters.", nameof(metaTitle));

        if (!string.IsNullOrWhiteSpace(metaDescription) && metaDescription.Length > 500)
            throw new ArgumentException("Meta description must be less than 500 characters.", nameof(metaDescription));

        return new SeoMetadata(metaTitle, metaDescription);
    }

    /// <summary>
    /// Creates an empty SEO metadata instance.
    /// </summary>
    /// <returns>An empty SEO metadata instance.</returns>
    public static SeoMetadata Empty => new(null, null);

    /// <summary>
    /// Creates SEO metadata automatically generated from product information.
    /// </summary>
    /// <param name="productName">The product name.</param>
    /// <param name="productDescription">The product description.</param>
    /// <param name="category">The product category.</param>
    /// <param name="brand">The product brand.</param>
    /// <returns>A new SEO metadata instance with auto-generated content.</returns>
    public static SeoMetadata CreateAutoGenerated(string productName, string productDescription, string? category = null, string? brand = null)
    {
        if (string.IsNullOrWhiteSpace(productName))
            throw new ArgumentException("Product name is required for auto-generation.", nameof(productName));

        // Generate meta title
        var titleParts = new List<string> { productName };

        if (!string.IsNullOrWhiteSpace(brand))
            titleParts.Add(brand);

        if (!string.IsNullOrWhiteSpace(category))
            titleParts.Add(category);

        var metaTitle = string.Join(" | ", titleParts);

        // Truncate if too long
        if (metaTitle.Length > 60)
            metaTitle = metaTitle.Substring(0, 57) + "...";

        // Generate meta description
        var metaDescription = string.IsNullOrWhiteSpace(productDescription)
            ? $"Shop {productName}" + (!string.IsNullOrWhiteSpace(brand) ? $" by {brand}" : "") + ". High quality products with fast shipping."
            : productDescription.Length <= 160
                ? productDescription
                : productDescription.Substring(0, 157) + "...";

        return new SeoMetadata(metaTitle, metaDescription);
    }

    /// <summary>
    /// Updates the meta title.
    /// </summary>
    /// <param name="metaTitle">The new meta title.</param>
    /// <returns>A new SEO metadata instance with updated meta title.</returns>
    public SeoMetadata WithMetaTitle(string? metaTitle)
    {
        return Create(metaTitle, MetaDescription);
    }

    /// <summary>
    /// Updates the meta description.
    /// </summary>
    /// <param name="metaDescription">The new meta description.</param>
    /// <returns>A new SEO metadata instance with updated meta description.</returns>
    public SeoMetadata WithMetaDescription(string? metaDescription)
    {
        return Create(MetaTitle, metaDescription);
    }

    /// <summary>
    /// Gets the character count status for meta title.
    /// </summary>
    /// <returns>A tuple indicating the current length and whether it's within optimal range.</returns>
    public (int Length, bool IsOptimal) GetMetaTitleStatus()
    {
        var length = MetaTitle?.Length ?? 0;
        return (length, length > 0 && length <= 60);
    }

    /// <summary>
    /// Gets the character count status for meta description.
    /// </summary>
    /// <returns>A tuple indicating the current length and whether it's within optimal range.</returns>
    public (int Length, bool IsOptimal) GetMetaDescriptionStatus()
    {
        var length = MetaDescription?.Length ?? 0;
        return (length, length > 0 && length <= 160);
    }

    protected override IEnumerable<object> GetAtomicValues()
    {
        yield return MetaTitle ?? string.Empty;
        yield return MetaDescription ?? string.Empty;
    }
}
